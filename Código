import numpy as np

def step_function(x):
    return 1 if x >= 0 else 0

def train_perceptron(X, y, learning_rate=0.1, epochs=10):
    """
    X: matriz de entrada (características)
    y: etiquetas esperadas (0 o 1)
    learning_rate: tasa de aprendizaje
    epochs: número de iteraciones
    """
    weights = np.random.rand(X.shape[1] + 1) 
    print("Pesos iniciales:", weights)

    for epoch in range(epochs):
        print(f"\n--- Época {epoch + 1} ---")
        for i in range(X.shape[0]):
            x_with_bias = np.append(X[i], 1)            
            output = step_function(np.dot(weights, x_with_bias))

            error = y[i] - output
            weights += learning_rate * error * x_with_bias
            print(f"Iteración {i + 1}, Pesos actualizados: {weights}")

    print("\nPesos finales:", weights)
    return weights

def test_perceptron(X, weights):
    """
    X: matriz de entrada para prueba
    weights: pesos aprendidos durante el entrenamiento
    """
    predictions = []
    for i in range(X.shape[0]):
        x_with_bias = np.append(X[i], 1)  
        prediction = step_function(np.dot(weights, x_with_bias))
        predictions.append(prediction)
    return predictions

# Datos para la compuerta NOR
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  
y = np.array([1, 0, 0, 0])  

# Datos para la compuerta OR
#X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  
#y = np.array([0, 1, 1, 1])  

# Datos para la compuerta AND
#X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  
#y = np.array([0, 0, 0, 1])  


weights = train_perceptron(X, y, learning_rate=0.1, epochs=10)

predictions = test_perceptron(X, weights)
print("\nPredicciones:", predictions)
